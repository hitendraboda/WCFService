//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsumeSevice.CalculatorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalculatorModel", Namespace="http://schemas.datacontract.org/2004/07/WcfService")]
    [System.SerializableAttribute()]
    public partial class CalculatorModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double number1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double number2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double number1 {
            get {
                return this.number1Field;
            }
            set {
                if ((this.number1Field.Equals(value) != true)) {
                    this.number1Field = value;
                    this.RaisePropertyChanged("number1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double number2 {
            get {
                return this.number2Field;
            }
            set {
                if ((this.number2Field.Equals(value) != true)) {
                    this.number2Field = value;
                    this.RaisePropertyChanged("number2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalculatorService.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/AddNumbers", ReplyAction="http://tempuri.org/ICalculator/AddNumbersResponse")]
        double AddNumbers(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/AddNumbers", ReplyAction="http://tempuri.org/ICalculator/AddNumbersResponse")]
        System.Threading.Tasks.Task<double> AddNumbersAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SubstractNumbers", ReplyAction="http://tempuri.org/ICalculator/SubstractNumbersResponse")]
        double SubstractNumbers(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SubstractNumbers", ReplyAction="http://tempuri.org/ICalculator/SubstractNumbersResponse")]
        System.Threading.Tasks.Task<double> SubstractNumbersAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/MultiplyNumbers", ReplyAction="http://tempuri.org/ICalculator/MultiplyNumbersResponse")]
        double MultiplyNumbers(ConsumeSevice.CalculatorService.CalculatorModel calculatorModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/MultiplyNumbers", ReplyAction="http://tempuri.org/ICalculator/MultiplyNumbersResponse")]
        System.Threading.Tasks.Task<double> MultiplyNumbersAsync(ConsumeSevice.CalculatorService.CalculatorModel calculatorModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DivisionNumbers", ReplyAction="http://tempuri.org/ICalculator/DivisionNumbersResponse")]
        double DivisionNumbers(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/DivisionNumbers", ReplyAction="http://tempuri.org/ICalculator/DivisionNumbersResponse")]
        System.Threading.Tasks.Task<double> DivisionNumbersAsync(double number1, double number2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : ConsumeSevice.CalculatorService.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<ConsumeSevice.CalculatorService.ICalculator>, ConsumeSevice.CalculatorService.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double AddNumbers(double number1, double number2) {
            return base.Channel.AddNumbers(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> AddNumbersAsync(double number1, double number2) {
            return base.Channel.AddNumbersAsync(number1, number2);
        }
        
        public double SubstractNumbers(double number1, double number2) {
            return base.Channel.SubstractNumbers(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> SubstractNumbersAsync(double number1, double number2) {
            return base.Channel.SubstractNumbersAsync(number1, number2);
        }
        
        public double MultiplyNumbers(ConsumeSevice.CalculatorService.CalculatorModel calculatorModel) {
            return base.Channel.MultiplyNumbers(calculatorModel);
        }
        
        public System.Threading.Tasks.Task<double> MultiplyNumbersAsync(ConsumeSevice.CalculatorService.CalculatorModel calculatorModel) {
            return base.Channel.MultiplyNumbersAsync(calculatorModel);
        }
        
        public double DivisionNumbers(double number1, double number2) {
            return base.Channel.DivisionNumbers(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> DivisionNumbersAsync(double number1, double number2) {
            return base.Channel.DivisionNumbersAsync(number1, number2);
        }
    }
}
